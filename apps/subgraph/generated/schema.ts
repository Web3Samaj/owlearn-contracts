// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Course extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Course entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Course must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Course", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Course | null {
    return changetype<Course | null>(store.get("Course", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get creatorId(): BigInt {
    let value = this.get("creatorId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set creatorId(value: BigInt) {
    this.set("creatorId", Value.fromBigInt(value));
  }

  get courseId(): BigInt {
    let value = this.get("courseId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set courseId(value: BigInt) {
    this.set("courseId", Value.fromBigInt(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get courseURI(): string {
    let value = this.get("courseURI");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set courseURI(value: string) {
    this.set("courseURI", Value.fromString(value));
  }

  get resourceAddress(): Bytes | null {
    let value = this.get("resourceAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set resourceAddress(value: Bytes | null) {
    if (!value) {
      this.unset("resourceAddress");
    } else {
      this.set("resourceAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get certificateAddress(): Bytes | null {
    let value = this.get("certificateAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set certificateAddress(value: Bytes | null) {
    if (!value) {
      this.unset("certificateAddress");
    } else {
      this.set("certificateAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get resources(): Array<Bytes> | null {
    let value = this.get("resources");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  get educator(): Bytes {
    let value = this.get("educator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set educator(value: Bytes) {
    this.set("educator", Value.fromBytes(value));
  }

  get certificate(): Bytes | null {
    let value = this.get("certificate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set certificate(value: Bytes | null) {
    if (!value) {
      this.unset("certificate");
    } else {
      this.set("certificate", Value.fromBytes(<Bytes>value));
    }
  }

  get mintModule(): Bytes | null {
    let value = this.get("mintModule");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set mintModule(value: Bytes | null) {
    if (!value) {
      this.unset("mintModule");
    } else {
      this.set("mintModule", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Resource extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Resource entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Resource must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Resource", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Resource | null {
    return changetype<Resource | null>(store.get("Resource", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get course(): Bytes {
    let value = this.get("course");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set course(value: Bytes) {
    this.set("course", Value.fromBytes(value));
  }

  get resourceURI(): string {
    let value = this.get("resourceURI");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resourceURI(value: string) {
    this.set("resourceURI", Value.fromString(value));
  }

  get resourceId(): BigInt {
    let value = this.get("resourceId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set resourceId(value: BigInt) {
    this.set("resourceId", Value.fromBigInt(value));
  }
}

export class Certificate extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Certificate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Certificate must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Certificate", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Certificate | null {
    return changetype<Certificate | null>(
      store.get("Certificate", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get course(): Bytes {
    let value = this.get("course");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set course(value: Bytes) {
    this.set("course", Value.fromBytes(value));
  }

  get certificateAddress(): Bytes {
    let value = this.get("certificateAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set certificateAddress(value: Bytes) {
    this.set("certificateAddress", Value.fromBytes(value));
  }

  get certificateBaseURI(): string | null {
    let value = this.get("certificateBaseURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set certificateBaseURI(value: string | null) {
    if (!value) {
      this.unset("certificateBaseURI");
    } else {
      this.set("certificateBaseURI", Value.fromString(<string>value));
    }
  }

  get certificateName(): string | null {
    let value = this.get("certificateName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set certificateName(value: string | null) {
    if (!value) {
      this.unset("certificateName");
    } else {
      this.set("certificateName", Value.fromString(<string>value));
    }
  }

  get certificateSymbol(): string | null {
    let value = this.get("certificateSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set certificateSymbol(value: string | null) {
    if (!value) {
      this.unset("certificateSymbol");
    } else {
      this.set("certificateSymbol", Value.fromString(<string>value));
    }
  }

  get enrolledUsers(): Array<Bytes> | null {
    let value = this.get("enrolledUsers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set enrolledUsers(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("enrolledUsers");
    } else {
      this.set("enrolledUsers", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }
}

export class Educator extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Educator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Educator must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Educator", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Educator | null {
    return changetype<Educator | null>(store.get("Educator", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get educatorId(): BigInt | null {
    let value = this.get("educatorId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set educatorId(value: BigInt | null) {
    if (!value) {
      this.unset("educatorId");
    } else {
      this.set("educatorId", Value.fromBigInt(<BigInt>value));
    }
  }

  get username(): string | null {
    let value = this.get("username");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set username(value: string | null) {
    if (!value) {
      this.unset("username");
    } else {
      this.set("username", Value.fromString(<string>value));
    }
  }

  get courses(): Array<Bytes> | null {
    let value = this.get("courses");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }
}

export class User extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type User must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): User | null {
    return changetype<User | null>(store.get("User", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get owlId(): BigInt {
    let value = this.get("owlId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set owlId(value: BigInt) {
    this.set("owlId", Value.fromBigInt(value));
  }

  get username(): string {
    let value = this.get("username");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set username(value: string) {
    this.set("username", Value.fromString(value));
  }

  get enrolledCourses(): Array<Bytes> | null {
    let value = this.get("enrolledCourses");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set enrolledCourses(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("enrolledCourses");
    } else {
      this.set("enrolledCourses", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }
}
