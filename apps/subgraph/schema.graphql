## Contains the Course Data , like Course info , lectures & all, with the Educator Reference
type Course @entity {
  id: Bytes! ## Address Course
  creatorId: BigInt!
  courseId: BigInt!
  address: Bytes!
  name: String!
  symbol: String!
  courseURI: String!
  resourceAddress: Bytes!
  certificateAddress: Bytes!
  resources: [Resource!] @derivedFrom(field: "course") ## Resource where the Couse is this
  educator: Educator!
  certificate: Certificate
  mintModule: Bytes
  ## Possible CourseData indexing , extras with IPFS
}

## Contains the resource (video) info seperately
type Resource @entity {
  id: Bytes! ## resourceID
  course: Course!
  resourceURI: String!
  resourceId: BigInt!
  ## We might also index the IPFS data and then store here
}

type Certificate @entity {
  id: Bytes! ## Certificate Address
  certificateAddress: Bytes!
  certificateBaseURI: String!
  certificateName: String!
  certificateSymbol: String!
  enrolledUsers: [User!] ## User record added once the NFT is minted
  ## Possible Certificate Data Indexing , with IPFS
}

## Contains the Educators info , their courses Reference directly
type Educator @entity {
  id: Bytes! ## eduID
  address: Bytes!
  educatorId: BigInt
  username: String
  courses: [Course!] @derivedFrom(field: "educator") ## Course where the Educator is this
}

## Contains the User data , name , username , owlId and the courses involved with certificates
type User @entity {
  id: Bytes! ## owlId
  address: Bytes!
  owlId: BigInt!
  username: String!
  enrolledCourses: [Course!]
}

# type CourseMetadata @entity {
#   id: Bytes!
# }

# type ResourceMetadata @entity {
#   id: Bytes!
# }

# type CertificateMetadata @entity {
#   id: Bytes!
# }
