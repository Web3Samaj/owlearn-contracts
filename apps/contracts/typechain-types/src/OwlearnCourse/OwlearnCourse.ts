/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface OwlearnCourseInterface extends utils.Interface {
  functions: {
    "courseCertificates()": FunctionFragment;
    "courseId()": FunctionFragment;
    "courseResources()": FunctionFragment;
    "creatorId()": FunctionFragment;
    "deleteCourseNFT(uint256)": FunctionFragment;
    "editCourseNFT(uint256,string)": FunctionFragment;
    "mintCourseCertificate(address,bytes)": FunctionFragment;
    "mintCourseNFTs(string[])": FunctionFragment;
    "mintModule()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAndInitialiseMintModule(address,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "courseCertificates"
      | "courseId"
      | "courseResources"
      | "creatorId"
      | "deleteCourseNFT"
      | "editCourseNFT"
      | "mintCourseCertificate"
      | "mintCourseNFTs"
      | "mintModule"
      | "owner"
      | "renounceOwnership"
      | "setAndInitialiseMintModule"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "courseCertificates",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "courseId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "courseResources",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "creatorId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deleteCourseNFT",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "editCourseNFT",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintCourseCertificate",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintCourseNFTs",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintModule",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAndInitialiseMintModule",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "courseCertificates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "courseId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "courseResources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creatorId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteCourseNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editCourseNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintCourseCertificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintCourseNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintModule", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAndInitialiseMintModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface OwlearnCourse extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OwlearnCourseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    courseCertificates(overrides?: CallOverrides): Promise<[string]>;

    courseId(overrides?: CallOverrides): Promise<[BigNumber]>;

    courseResources(overrides?: CallOverrides): Promise<[string]>;

    creatorId(overrides?: CallOverrides): Promise<[BigNumber]>;

    deleteCourseNFT(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editCourseNFT(
      tokenId: PromiseOrValue<BigNumberish>,
      newNFTURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintCourseCertificate(
      to: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintCourseNFTs(
      courseNFTURIs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintModule(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAndInitialiseMintModule(
      _mintModule: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  courseCertificates(overrides?: CallOverrides): Promise<string>;

  courseId(overrides?: CallOverrides): Promise<BigNumber>;

  courseResources(overrides?: CallOverrides): Promise<string>;

  creatorId(overrides?: CallOverrides): Promise<BigNumber>;

  deleteCourseNFT(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editCourseNFT(
    tokenId: PromiseOrValue<BigNumberish>,
    newNFTURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintCourseCertificate(
    to: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintCourseNFTs(
    courseNFTURIs: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintModule(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAndInitialiseMintModule(
    _mintModule: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    courseCertificates(overrides?: CallOverrides): Promise<string>;

    courseId(overrides?: CallOverrides): Promise<BigNumber>;

    courseResources(overrides?: CallOverrides): Promise<string>;

    creatorId(overrides?: CallOverrides): Promise<BigNumber>;

    deleteCourseNFT(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    editCourseNFT(
      tokenId: PromiseOrValue<BigNumberish>,
      newNFTURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintCourseCertificate(
      to: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintCourseNFTs(
      courseNFTURIs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintModule(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAndInitialiseMintModule(
      _mintModule: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    courseCertificates(overrides?: CallOverrides): Promise<BigNumber>;

    courseId(overrides?: CallOverrides): Promise<BigNumber>;

    courseResources(overrides?: CallOverrides): Promise<BigNumber>;

    creatorId(overrides?: CallOverrides): Promise<BigNumber>;

    deleteCourseNFT(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editCourseNFT(
      tokenId: PromiseOrValue<BigNumberish>,
      newNFTURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintCourseCertificate(
      to: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintCourseNFTs(
      courseNFTURIs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintModule(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAndInitialiseMintModule(
      _mintModule: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    courseCertificates(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    courseId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    courseResources(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creatorId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deleteCourseNFT(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editCourseNFT(
      tokenId: PromiseOrValue<BigNumberish>,
      newNFTURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintCourseCertificate(
      to: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintCourseNFTs(
      courseNFTURIs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintModule(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAndInitialiseMintModule(
      _mintModule: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
